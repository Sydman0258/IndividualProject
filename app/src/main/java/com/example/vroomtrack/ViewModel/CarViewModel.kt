package com.example.vroomtrack.ViewModel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.vroomtrack.Repository.CarRepository
import com.example.vroomtrack.Repository.CarRepositoryImpl
import com.example.vroomtrack.model.CarModel // <-- Updated import
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class CarViewModel(private val repository: CarRepository = CarRepositoryImpl()) : ViewModel() {

    private val _cars = MutableStateFlow<List<CarModel>>(emptyList())
    val cars: StateFlow<List<CarModel>> = _cars.asStateFlow()

    private val _selectedCar = MutableStateFlow<CarModel?>(null)
    val selectedCar: StateFlow<CarModel?> = _selectedCar.asStateFlow()

    init {
        viewModelScope.launch {
            repository.getAllCars().collect {
                _cars.value = it
            }
        }
    }

    fun loadCarById(id: String) {
        viewModelScope.launch {
            _selectedCar.value = repository.getCarById(id)
        }
    }

    fun clearSelectedCar() {
        _selectedCar.value = null
    }

    // Updated addCar function with CarModel fields
    fun addCar(
        name: String,
        brand: String,
        imageUrl: String,
        pricePerDay: String,
        rating: Double,
        description: String,
        onResult: (Boolean, String) -> Unit
    ) {
        viewModelScope.launch {
            val newCar = CarModel(
                id = "", // ID will be generated by repository or backend
                name = name,
                brand = brand,
                imageUrl = imageUrl,
                pricePerDay = pricePerDay,
                rating = rating,
                description = description
            )
            val success = repository.addCar(newCar)
            if (success) {
                onResult(true, "Car added successfully!")
            } else {
                onResult(false, "Failed to add car.")
            }
        }
    }

    fun updateCar(
        id: String,
        name: String,
        brand: String,
        imageUrl: String,
        pricePerDay: String,
        rating: Double,
        description: String,
        available: Boolean, // Include isAvailable if it can be updated
        onResult: (Boolean, String) -> Unit
    ) {
        viewModelScope.launch {
            if (id.isEmpty()) {
                onResult(false, "Car ID is missing for update.")
                return@launch
            }
            val existingCar = _selectedCar.value?.id == id
            val updatedCar = CarModel(
                id = id,
                name = name,
                brand = brand,
                imageUrl = imageUrl,
                pricePerDay = pricePerDay,
                rating = rating,
                description = description,
                available = available, // Pass the current availability
                createdAt = _selectedCar.value?.createdAt ?: System.currentTimeMillis() // Preserve original creation time
            )
            val success = repository.updateCar(updatedCar)
            if (success) {
                onResult(true, "Car updated successfully!")
                if (_selectedCar.value?.id == id) {
                    _selectedCar.value = updatedCar // Update selected car in ViewModel
                }
            } else {
                onResult(false, "Failed to update car.")
            }
        }
    }

    fun deleteCar(id: String, onResult: (Boolean, String) -> Unit) {
        viewModelScope.launch {
            val success = repository.deleteCar(id)
            if (success) {
                onResult(true, "Car deleted successfully!")
            } else {
                onResult(false, "Failed to delete car.")
            }
        }
    }
}